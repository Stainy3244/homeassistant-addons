name: Builder

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: changed_addons
        run: |
          declare -a changed_addons
          for file in ${{ steps.changed_files.outputs.all }}; do
            if [[ $file == */config.yaml ]] || [[ $file == */Dockerfile ]] || [[ $file == */run.sh ]]; then
              addon=$(echo $file | cut -d/ -f1)
              # Convert to lowercase for consistency
              addon_lower=$(echo "$addon" | tr '[:upper:]' '[:lower:]')
              if [[ -d "${addon}" ]] && [[ -f "${addon}/config.yaml" ]]; then
                changed_addons=("${changed_addons[@]}" "${addon_lower}")
              fi
            fi
          done
          
          # Always build on tag pushes
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            changed_addons=()
            for dir in */; do
              if [[ -f "${dir}config.yaml" ]]; then
                addon=${dir%/}
                addon_lower=$(echo "$addon" | tr '[:upper:]' '[:lower:]')
                changed_addons=("${changed_addons[@]}" "${addon_lower}")
              fi
            done
          fi
          
          changed=$(printf "%s\n" "${changed_addons[@]}" | sort -u | tr '\n' ' ')
          
          if [[ ${#changed_addons[@]} -gt 0 ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            # Create proper JSON array
            json_array="["
            for i in "${!changed_addons[@]}"; do
              if [[ $i -gt 0 ]]; then
                json_array+=","
              fi
              json_array+="\"${changed_addons[$i]}\""
            done
            json_array+="]"
            echo "addons=$json_array" >> $GITHUB_OUTPUT;
          else
            echo "No add-on files changed"
            echo "changed=false" >> $GITHUB_OUTPUT;
            echo "addons=[]" >> $GITHUB_OUTPUT;
          fi

  version-bump:
    runs-on: ubuntu-latest
    name: Auto version bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.event.head_commit.message, 'bump:') && needs.init.outputs.changed == 'true'
    needs: init
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(grep 'version:' ${{ matrix.addon }}/config.yaml | sed 's/version: *"\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version for ${{ matrix.addon }}: $CURRENT_VERSION"

      - name: Determine version bump type
        id: bump_type
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ feat(\(.+\))?!:|BREAKING[[:space:]]CHANGE ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" =~ feat(\(.+\))?: ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT  
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump
        run: |
          CURRENT="${{ steps.current.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}  
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Bumped ${{ matrix.addon }} version from $CURRENT to $NEW_VERSION (type: $BUMP_TYPE)"
          
          # Update config.yaml
          sed -i "s/version: \"$CURRENT\"/version: \"$NEW_VERSION\"/" ${{ matrix.addon }}/config.yaml
          
          # Commit changes (will be pushed after all addons are processed)
          git add ${{ matrix.addon }}/config.yaml

      - name: Push version updates
        run: |
          if git diff --staged --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "bump: update add-on versions"
            git push
          fi

  build:
    needs: init
    runs-on: ubuntu-latest
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.addon }} (${{ matrix.arch }})
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: ["aarch64", "amd64", "armv7"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.addon }}
        uses: home-assistant/builder@2024.03.5
        env:
          BUILD_ARGS: ${{ github.event_name == 'pull_request' && '--test' || '' }}
        with:
          args: >
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target ./Dispatcharr \
            --image "ghcr.io/${{ github.repository_owner }}/addon-${{ matrix.addon }}-${{ matrix.arch }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --addon
